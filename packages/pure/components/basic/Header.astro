---
import config from 'virtual:config'

import { Icon } from '../user'
---

<header-component
  class='!important group sticky top-4 z-30 mb-12 flex items-center justify-between rounded-xl border border-transparent py-2 backdrop-blur-xl max-sm:py-2 sm:rounded-2xl'
>
  <!-- <div
      class='absolute -left-4 -top-8 -z-10 box-content hidden h-20 w-[calc(100%+2rem)] !duration-0 max-sm:group-[.expanded]:block max-sm:group-[.expanded.not-top]:hidden max-sm:group-[.expanded]:bg-white dark:max-sm:group-[.expanded]:bg-muted'
    >
    </div> -->
  <a
    class='navBtn home z-30 flex items-center gap-x-2 rounded-lg px-3 py-1.5 text-xl font-semibold group-[.not-top]:ms-2 sm:group-[.not-top]:ms-3'
    href='/'
    aria-label='Brand'><Icon name='home' />{config.title}</a
  >

  <div class='flex items-center'>
    {/* Menu links */}
    <div
      id='headerExpandConetent'
      class='end-0 start-0 top-12 grid group-[.not-top]:rounded-xl group-[.expanded]:opacity-100 dark:group-[.expanded.not-top]:bg-muted max-sm:absolute max-sm:opacity-0 max-sm:group-[.not-top]:border-border max-sm:group-[.expanded.not-top]:bg-background max-sm:group-[.not-top]:px-4 max-sm:group-[.not-top]:py-2 sm:grid-rows-1'
    >
      <div class='flex flex-col items-center justify-center overflow-hidden sm:flex-row'>
        {
          config.header.menu.map((item) => (
            <a
              href={item.link}
              class='navBtn w-full flex-none grow py-2 text-right font-medium hover:text-primary sm:w-fit sm:px-3'
              aria-label='Nav menu item'
            >
              {item.title}
            </a>
          ))
        }
        <div class='flex w-full grow flex-row justify-end gap-x-3 sm:w-fit sm:gap-x-5'>
          <a class='navBtn px-3 py-2.5' href='/search' title='Search'>
            <span class='sr-only'>Search</span>
            <Icon name='search' class='size-5' />
          </a>
        </div>
      </div>
    </div>

    <!-- buttons -->
    <div class='z-30 flex gap-x-4 group-[.not-top]:gap-x-2'>
      <button
        id='toggleDarkMode'
        class='navBtn group/dark box-content size-5 rounded-md px-3 py-2.5 sm:group-[.not-top]:rounded-xl'
      >
        <span class='sr-only'>Dark Theme</span>
        <Icon class='system size-5 group-hover/dark:text-primary' name='computer' />
        <Icon class='light hidden size-5 group-hover/dark:text-primary' name='sun' />
        <Icon class='dark hidden size-5 group-hover/dark:text-primary' name='moon' />
      </button>
      <button
        id='toggleMenu'
        class='rounded-md p-1.5 hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl'
      >
        <span class='sr-only'>Menu</span>
        <Icon class='size-5' name='menu' />
      </button>
    </div>
  </div>
</header-component>

{/* Use inline to load icon quicker firstly */}
<script>
  import { setTheme, showToast } from '../../utils'

  class Header extends HTMLElement {
    constructor() {
      super()
    }

    connectedCallback() {
      // Header
      let preScrollY = window.scrollY
      this.classList.toggle('not-top', preScrollY > 20)
      window.addEventListener('scroll', () => {
        this.classList.toggle('not-top', window.scrollY > 20)
        this.dataset.show = (window.scrollY < 500 || window.scrollY < preScrollY).toString()
        preScrollY = window.scrollY
      })

      // Dark Mode
      const darkModeBtn = this.querySelector('#toggleDarkMode') as HTMLElement
      darkModeBtn.addEventListener('click', () => {
        // Old way: dispatch event
        // const toggleDarkModeEvent = new CustomEvent('theme-change', {
        //   detail: { theme: localStorage.getItem('theme') === 'light' ? 'dark' : 'light' }
        // })
        // document.dispatchEvent(toggleDarkModeEvent)
        const newTheme = setTheme(undefined, true)
        darkModeBtn.dataset.theme = newTheme
        showToast({ message: `${newTheme}로 설정하였습니다.` })
      })

      // Menu
      this.querySelector('#toggleMenu')?.addEventListener('click', () => {
        this.classList.toggle('expanded')
      })
    }
  }

  customElements.define('header-component', Header)
</script>
<style>
  .navBtn {
    position: relative;
    transition: 0.15s;
    background-color: transparent;

    &::before {
      content: '';
      z-index: -1;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: hsl(var(--primary) / 0.1);
      border-radius: 8px;
      transform: scale(0);
      transition: 0.15s;
    }

    &:hover {
      color: hsl(var(--primary) / 1);

      &::before {
        transform: scale(1);
      }
    }
  }

  header-component {
    border: none;
    transition:
      padding 0.3s,
      transform 0.3s,
      margin-inline 0.3s,
      border 0.15s,
      background-color 0.15s;
    backdrop-filter: blur(24px);
    -webkit-backdrop-filter: blur(24px);

    & .home {
      transform: translateX(-0.75rem);
    }

    &.not-top {
      border: none;
      padding-left: 0.5rem;
      padding-right: 0.5rem;

      background-color: hsl(var(--background) / 0.7);
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;

      & .home {
        transform: translateX(-0.75rem);
      }
    }
    &[data-show='false']:not(.expanded) {
      transform: translateY(-5rem);
    }
  }
  @media (min-width: 800px) {
    header-component.not-top {
      margin-inline: 8%;
    }
  }

  /* header menu */
  @media (max-width: 640px) {
    #headerExpandConetent {
      grid-template-rows: 0fr;
      transition:
        opacity 0.3s,
        padding 0.3s,
        border-color 0.15s,
        grid-template-rows 0.3s;
    }
    .expanded #headerExpandConetent {
      grid-template-rows: 1fr;
    }
    .expanded.not-top #headerExpandConetent {
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
    }

    /* header component after */
    header-component #headerExpandConetent::after {
      box-sizing: content-box;
      content: '';
      position: absolute;
      inset-inline: calc(-1rem - 1px);
      bottom: 0;
      top: -5rem;
      z-index: -1;
      transition: 0.3s;
      visibility: hidden;
      opacity: 0;
      border-bottom: 1px solid transparent;
    }
    header-component:not(.not-top) #headerExpandConetent::after {
      visibility: visible;
      bottom: -1rem;
      opacity: 1;
      background-color: hsl(var(--muted) / var(--tw-bg-opacity, 1));
      border-bottom-color: hsl(var(--border) / var(--tw-border-opacity, 1));
    }
  }

  /* dark light mode toggle */
  #toggleDarkMode {
    &[data-theme='dark'] {
      & .system {
        display: none;
      }
      & .dark {
        display: block;
      }
    }
    &[data-theme='light'] {
      & .system {
        display: none;
      }
      .light {
        display: block;
      }
    }
  }
</style>
