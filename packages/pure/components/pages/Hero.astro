---
import { Image } from 'astro:assets'
import { type CollectionKey, type InferEntrySchema } from 'astro:content'

import { PageInfo } from '.'
import { FormattedDate, Icon } from '../user'

interface Props {
  data: InferEntrySchema<CollectionKey>
  remarkPluginFrontmatter: Record<string, unknown>
}

const {
  data: {
    title,
    description,
    draft,
    heroImage,
    publishDate,
    updatedDate,
    comment: enableComment,
    tags,
    language
  },
  remarkPluginFrontmatter
} = Astro.props

const dateTimeOptions: Intl.DateTimeFormatOptions = {
  month: 'short'
}
---

{
  heroImage && (
    <div class='hero-image relative mb-6'>
      <Image
        alt={heroImage.alt || title}
        class='cover-image relative z-10 h-auto w-full rounded-2xl object-contain'
        fetchpriority='high'
        loading='eager'
        src={heroImage.src}
      />
    </div>
  )
}

{draft ? <span class='text-red-500'>(Draft)</span> : null}

<div class='article-info max-lg:mx-auto'>
  <div class='flex flex-wrap gap-x-4 gap-y-2 text-xs leading-6 text-muted-foreground'>
    {/* Article date */}
    <div class='flex items-center gap-1'>
      <Icon name='calendar' class='size-5' />
      <FormattedDate class='font-sans' date={publishDate} dateTimeOptions={dateTimeOptions} />
      {
        updatedDate && (
          <div class='flex items-center gap-1'>
            <span> / </span>
            <span>
              업데이트
              <FormattedDate
                class='font-sans'
                date={updatedDate}
                dateTimeOptions={dateTimeOptions}
              />
            </span>
          </div>
        )
      }
    </div>
    {/* Times read */}
    <div class='flex items-center gap-1'>
      <Icon name='time' class='size-5' />
      읽는데 {`${remarkPluginFrontmatter.minutesRead}`.replace(/[^0-9]/g, '')}분 소요
    </div>
    {
      // Language
      language && (
        <span class='flex items-center gap-1'>
          <Icon name='earth' class='size-5' />
          {language}
        </span>
      )
    }
    {
      // Tags
      !!tags?.length && (
        <span class='flex items-center gap-1'>
          <Icon name='hashtag' class='size-5' />
          {tags.map((tag: string, i: number) => (
            <div>
              <a
                aria-label={`View more blogs with the tag ${tag}`}
                class='hover:underline hover:underline-offset-4'
                data-pagefind-filter='tag'
                href={`/tags/${tag}`}
              >
                {tag}
              </a>
              {i < tags.length - 1 && '/'}
            </div>
          ))}
        </span>
      )
    }
  </div>

  <h1 class='mt-4 text-2xl font-medium sm:mb-2 sm:mt-6 sm:text-3xl'>
    {title}
  </h1>

  <div class='mt-3 italic'>
    <blockquote class='text-sm text-muted-foreground'><q>{description}</q></blockquote>
    {!draft && enableComment && <PageInfo class='mt-1' />}
  </div>
</div>

{/* Dividing line */}
<div class='mt-4 w-1/2 border-t max-lg:mx-auto sm:mt-6 sm:w-1/3'></div>

<script>
  const viewportHeight = window.innerHeight
  const threshold1 = viewportHeight / 9
  const threshold2 = (viewportHeight * 2) / 9
  const threshold3 = (viewportHeight * 3) / 9
  const image = document.getElementById('blurImage') as HTMLImageElement

  if (image) {
    window.addEventListener('scroll', () => {
      const scrollDistance = window.scrollY
      // console.log(scrollDistance, threshold1, threshold2, threshold3)

      if (scrollDistance >= threshold3) {
        image.style.opacity = '0.15'
      } else if (scrollDistance >= threshold2) {
        image.style.opacity = '0.3'
      } else if (scrollDistance >= threshold1) {
        image.style.opacity = '0.45'
      }
    })
  }
</script>
